/* Generated By:JavaCC: Do not edit this line. Bela.java */
import ast.*;
import java.io.*;
import java.util.*;

public class Bela implements BelaConstants {

  public static void main(String args[]) throws ParseException, IOException {
    Bela analisador = new Bela(new FileInputStream(args[0]));
    Prog programa = analisador.BELA();
    System.out.println(programa);
    // Aqui você pode adicionar código para processar a AST
  }

  static final public Prog BELA() throws ParseException {
 Main main; ArrayList<Fun> funs = new ArrayList<Fun>();
    main = MAIN_();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      funs = FUNCAO();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
   {if (true) return new Prog(main, funs);}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

  static final public Main MAIN_() throws ParseException {
 ArrayList<VarDecl> vars; ArrayList<Comando> coms = new ArrayList<Comando>();
    jj_consume_token(MAIN);
    jj_consume_token(APAR);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    vars = VARDECL();
    coms = SEQCOMANDOS();
    jj_consume_token(FCHAVES);
   {if (true) return new Main(vars,coms);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<VarDecl> VARDECL() throws ParseException {
 ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); String tipo; Token var;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(VAR);
      tipo = TIPO();
      var = jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
                                            vars.add(new VarDecl(tipo,var.image));
    }
   {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

  static final public String TIPO() throws ParseException {
 Token tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      tipo = jj_consume_token(FLOAT);
      break;
    case BOOL:
      tipo = jj_consume_token(BOOL);
      break;
    case VOID:
      tipo = jj_consume_token(VOID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return tipo.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String OP() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      t = jj_consume_token(ADD);
      break;
    case SUB:
      t = jj_consume_token(SUB);
      break;
    case MULT:
      t = jj_consume_token(MULT);
      break;
    case DIV:
      t = jj_consume_token(DIV);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case LT:
      t = jj_consume_token(LT);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Comando> SEQCOMANDOS() throws ParseException {
 ArrayList<Comando> coms = new ArrayList<Comando>(); Comando com;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTLN:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      com = COMANDO();
                    coms.add(com);
    }
   {if (true) return coms;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando COMANDO() throws ParseException {
 Comando com; Exp exp; ArrayList<Comando> bloco = new ArrayList<Comando>(); Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      tok = jj_consume_token(ID);
      com = C_LINHA(tok.image);
      break;
    case IF:
      jj_consume_token(IF);
      exp = EXP();
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      bloco = SEQCOMANDOS();
      jj_consume_token(FCHAVES);
      jj_consume_token(SEMICOLON);
                                                                                 com = new CIf(0, exp, bloco);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      exp = EXP();
      jj_consume_token(ACHAVES);
      bloco = SEQCOMANDOS();
      jj_consume_token(FCHAVES);
      jj_consume_token(SEMICOLON);
                                                                               com = new CWhile(0, exp, bloco);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      exp = EXP();
      jj_consume_token(SEMICOLON);
                                      com = new CReturn(0, exp);
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      exp = EXP();
      jj_consume_token(SEMICOLON);
                                       com = new CPrint(0, exp);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando C_LINHA(String val) throws ParseException {
 Exp exp; ArrayList<Exp> args = new ArrayList<Exp>(); Comando com = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIB:
      jj_consume_token(ATRIB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
        exp = EXP();
        jj_consume_token(SEMICOLON);
                                 com = new CAtribuicao(0, val, exp);
        break;
      case READI:
        jj_consume_token(READI);
        jj_consume_token(APAR);
        jj_consume_token(FPAR);
        jj_consume_token(SEMICOLON);
                                           com = new CReadInput(0, val);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case APAR:
      jj_consume_token(APAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
        args = LISTAEXP();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(FPAR);
      jj_consume_token(SEMICOLON);
     com = new CChamadaFun(0, val, args);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

// EXPRESSÕES COM PRECEDÊNCIA
  static final public Exp EXP() throws ParseException {
 Exp exp; Exp exp1; Exp exp2; String op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      exp1 = EXP();
      op = OP();
      exp2 = EXP();
      jj_consume_token(FPAR);
                                                   exp = new EOpExp(op, exp1, exp2);
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      exp = EXP_ATOM();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp EXP_ATOM() throws ParseException {
 Token token = new Token(); Exp result = null; Token idToken = new Token(); ArrayList<Exp> args = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      result = EXP();
      jj_consume_token(FPAR);
      break;
    case ID:
      idToken = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
        jj_consume_token(APAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APAR:
        case TRUE:
        case FALSE:
        case NUM:
        case ID:
          args = LISTAEXP();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(FPAR);
           result = new EChamadaFun(idToken.image, args);
        break;
      default:
        jj_la1[11] = jj_gen;
           result = new EVar(idToken.image);
      }
      break;
    case NUM:
      token = jj_consume_token(NUM);
                     result = new EFloat(Float.parseFloat(token.image));
      break;
    case TRUE:
      token = jj_consume_token(TRUE);
                      result = new ETrue();
      break;
    case FALSE:
      token = jj_consume_token(FALSE);
                       result = new EFalse();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Exp> LISTAEXP() throws ParseException {
 ArrayList<Exp> exps = new ArrayList(); Exp exp;
    exp = EXP();
               exps.add(exp);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      exp = EXP();
                                                    exps.add(exp);
    }
   {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Fun> FUNCAO() throws ParseException {
 ArrayList<Fun> bloco = new ArrayList(); Token nome; ArrayList<ParamFormalFun> params = new ArrayList(); String retorno; ArrayList<VarDecl> vars; ArrayList<Comando> body = new ArrayList();
    jj_consume_token(FUN);
    retorno = TIPO();
    nome = jj_consume_token(ID);
    jj_consume_token(APAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
    case BOOL:
    case VOID:
      params = LISTAARG();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    vars = VARDECL();
    body = SEQCOMANDOS();
    jj_consume_token(FCHAVES);
                                                                                                                                     bloco.add(new Fun(nome.image, params, retorno, vars, body));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUN:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      jj_consume_token(FUN);
      retorno = TIPO();
      nome = jj_consume_token(ID);
      jj_consume_token(APAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
      case BOOL:
      case VOID:
        params = LISTAARG();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(FPAR);
      jj_consume_token(ACHAVES);
      vars = VARDECL();
      body = SEQCOMANDOS();
      jj_consume_token(FCHAVES);
                                                                                                                                      bloco.add(new Fun(nome.image, params, retorno, vars, body));
    }
   {if (true) return bloco;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<ParamFormalFun> LISTAARG() throws ParseException {
 ArrayList<ParamFormalFun> params = new ArrayList(); String tipo; Token var;
    tipo = TIPO();
    var = jj_consume_token(ID);
                            params.add(new ParamFormalFun(tipo, var.image));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      tipo = TIPO();
      var = jj_consume_token(ID);
                                                                                                                params.add(new ParamFormalFun(tipo, var.image));
    }
   {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BelaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40,0x3800,0xfe000000,0x550000,0x550000,0x1a00080,0x1800080,0x8080,0x1800080,0x1800080,0x80,0x1800080,0x0,0x3800,0x0,0x3800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x0,0x0,0x3,0x20,0x20,0x30,0x30,0x0,0x30,0x30,0x0,0x30,0x4,0x0,0x8,0x0,0x4,};
   }

  /** Constructor with InputStream. */
  public Bela(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bela(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Bela(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Bela(BelaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BelaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
