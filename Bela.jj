PARSER_BEGIN(Bela)
import ast.*;
import java.io.*;
import java.util.*;

public class Bela {

  public static void main(String args[]) throws ParseException, IOException {
    Bela analisador = new Bela(new FileInputStream(args[0]));
    Prog programa = analisador.BELA();
    // Aqui você pode adicionar código para processar a AST
  }

}
PARSER_END(Bela)

SKIP: {
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN: {
  <MAIN: "main">
| <VAR: "var">
| <APAR: "(">
| <FPAR: ")">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <FLOAT: "float">
| <BOOL: "bool">
| <VOID: "void">
| <SEMICOLON: ";">
| <ATRIB: "=">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <ELSE: "else">
| <RETURN: "return">
| <READI: "readInput">
| <PRINTLN: "printLn">
| <TRUE: "true">
| <FALSE: "false">
| <ADD: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <LT: "<">
| <GT: ">">
| <EQUAL: "==">
| <COMMA: ",">
| <FUN: "fun">
}

TOKEN: {
  <NUM: (["0"-"9"])+ ("." (["0"-"9"])+)? (["E","e"] (["+","-"])? (["0"-"9"])+)?> 
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+)*>
}

Prog BELA() :
{Main main; ArrayList<Fun> funs = new ArrayList<Fun>();}
{
  main=MAIN_() (funs=FUNCAO())?
  {return new Prog(main, funs);}
  <EOF>
}

Main MAIN_():
{ArrayList<VarDecl> vars; ArrayList<Comando> coms = new ArrayList<Comando>();}
{
  <MAIN> <APAR> <FPAR> <ACHAVES> vars=VARDECL() coms=SEQCOMANDOS() <FCHAVES>
  {return new Main(vars,coms);}
}

ArrayList<VarDecl> VARDECL():
{ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); String tipo; Token var;}
{
  ( <VAR> tipo=TIPO() var=<ID> <SEMICOLON> {vars.add(new VarDecl(tipo,var.image));} )*
  {return vars;}
}

String TIPO():
{Token tipo;}
{
  (tipo = <FLOAT> | tipo = <BOOL> | tipo = <VOID>)
  {return tipo.image;}
}

String OP():
{Token t;}
{
  (t=<ADD> | t=<SUB> | t=<MULT> | t=<DIV> | t=<AND> | t=<OR> | t=<LT> | t=<GT> | t=<EQUAL>)
  {return t.image;}
}

ArrayList<Comando> SEQCOMANDOS():
{ArrayList<Comando> coms = new ArrayList<Comando>(); Comando com;}
{
  (com = COMANDO() {coms.add(com);})*
  {return coms;}
}

Comando COMANDO():
{Comando com; Exp exp; ArrayList<Comando> bloco = new ArrayList<Comando>(); Token tok;}
{
  (
    tok = <ID> com=C_LINHA(tok.image) 
  | <IF> exp = EXP() <THEN> <ACHAVES> bloco=SEQCOMANDOS() <FCHAVES> <SEMICOLON> {com = new CIf(0, exp, bloco);}
  | <WHILE> exp = EXP() <ACHAVES> bloco = SEQCOMANDOS() <FCHAVES> <SEMICOLON> {com = new CWhile(0, exp, bloco);}
  | <RETURN> exp = EXP() <SEMICOLON> {com = new CReturn(0, exp);}
  | <PRINTLN> exp = EXP() <SEMICOLON> {com = new CPrint(0, exp);}
  )
  {return com;}
}

Comando C_LINHA(String val):
{Exp exp; ArrayList<Exp> args = new ArrayList<Exp>(); Comando com = null;}
{
  ((
    <ATRIB> 
    (
        exp = EXP() <SEMICOLON> {com = new CAtribuicao(0, val, exp);}
    |   <READI> <APAR> <FPAR> <SEMICOLON> {com = new CReadInput(0, val);}
    )
  )
  |
  (
    <APAR> 
    (args = LISTAEXP())? 
    <FPAR> 
    <SEMICOLON> 
    {com = new CChamadaFun(0, val, args);}
  ))
  {return com;}
}

// EXPRESSÕES COM PRECEDÊNCIA

Exp EXP():
{Exp exp; Exp exp1; Exp exp2; String op;}
{
  ((<APAR> exp1=EXP() op = OP() exp2=EXP() <FPAR> {exp = new EOpExp(op, exp1, exp2);}) | exp=EXP_ATOM())
  {return exp;}
}

Exp EXP_ATOM():
{Token token = new Token(); Exp result = null; Token idToken = new Token(); ArrayList<Exp> args = null;}
{
  (
      <APAR> result = EXP() <FPAR>
    | idToken = <ID>
      (
          <APAR> 
          (args = LISTAEXP())? 
          <FPAR> 
          {result = new EChamadaFun(idToken.image, args);}
      |   {result = new EVar(idToken.image);}
      )
    | token = <NUM> {result = new EFloat(Float.parseFloat(token.image));}
    | token = <TRUE> {result = new ETrue();}
    | token = <FALSE> {result = new EFalse();}
  )
  {return result;}
}

ArrayList<Exp> LISTAEXP():
{ArrayList<Exp> exps = new ArrayList(); Exp exp;}
{
  exp = EXP() {exps.add(exp);}(<COMMA> exp = EXP() {exps.add(exp);})*

  {return exps;}
}

ArrayList<Fun> FUNCAO():
{ArrayList<Fun> bloco = new ArrayList(); Token nome; ArrayList<ParamFormalFun> params = new ArrayList(); String retorno; ArrayList<VarDecl> vars; ArrayList<Comando> body = new ArrayList();}
{
  <FUN> retorno = TIPO() nome = <ID> <APAR> (params = LISTAARG())? <FPAR> <ACHAVES> vars = VARDECL() body = SEQCOMANDOS() <FCHAVES> {bloco.add(new Fun(nome.image, params, retorno, vars, body));}
  (<FUN> retorno = TIPO() nome = <ID> <APAR> (params = LISTAARG())? <FPAR> <ACHAVES> vars = VARDECL() body = SEQCOMANDOS() <FCHAVES> {bloco.add(new Fun(nome.image, params, retorno, vars, body));})*

  {return bloco;}
}

ArrayList<ParamFormalFun> LISTAARG():
{ArrayList<ParamFormalFun> params = new ArrayList(); String tipo; Token var;}
{
  tipo = TIPO() var = <ID> {params.add(new ParamFormalFun(tipo, var.image));}(<COMMA> tipo = TIPO() var = <ID> {params.add(new ParamFormalFun(tipo, var.image));})*

  {return params;}
}